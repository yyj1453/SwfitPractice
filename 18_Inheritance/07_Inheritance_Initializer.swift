/*
   ※ 지정 이니셜라이저와 편의 이니셜라이저 사이의 규칙
   1. 자식클래스의 지정 이니셜라이저는 부모클래스의 지정 이니셜라이저를 반드시 호출해야함
   2. 편의 이니셜라이저는 자신을 정의한 클래스의 다른 이니셜라이저를 반드시 호출해야함
   3. 편의 이니셜라이저는 궁극적으로는 지정 이니셜라이저를 반드시 호출해야함

   ※ 스위프트의 클래스 초기화 안전 확인
   1. 자식클래스의 지정 이니셜라이저가 부모클래스의 이니셜라이저를 호출하기 전에 
      자신의 프로퍼티를 모두 초기화했는지 확인
   2. 자식클래스의 지정 이니셜라이저는 상속받은 프로퍼티에 값을 할당하기 전에 
      반드시 부모클래스의 이니셜라이저를 호출해야 함
   3. 편의 이니셜라이저는 자신의 클래스에 정의한 프로퍼티를 포함하여 그 어떤 프로퍼티라도
      값을 할당하기 전에 다른 이니셜라이저를 호출해야 함
   4. 초기화 1단계를 마치기 전까지는 이니셜라이저는 인스턴스 메소드를 호출할 수 없음
      또, 인스턴스 프로퍼티의 값을 읽어들이지도 못하고 self 프로퍼티를 자신의 인스턴스를 
      나타내는 값으로 활용할 수도 없음

   ※ 2단계 초기화
   1. 1단계
      1) 클래스가 지정 또는 편의 이니셜라이저를 호출함
      2) 그 클래스의 새로운 인스턴스를 위한 메모리가 할당되고 아직 메모리는 초기화되지 않은 상태
      3) 지정 이니셜라이저는 클래스에 정의된 모든 지정 프로퍼티에 값이 있는지 확인
         현재 클래스 부분까지의 저장 프로퍼티를 위한 메모리는 이제 초기화
      4) 지정 이니셜라이저는 부모클래스의 이니셜라이저가 같은 동작을 핼항 수 있도록 초기화를 양도
      5) 부모클래스는 상송 체인을 따라 최상위 클래스에 도달할 때까지 이 작업을 반복
   2. 2단계
      1) 최상위 클래스로부터 최하위 클래스까지 상속 체인을 따라 내려오면서 
         지정 이니셜라이저들이 인스턴스를 제 각각 사용자 정의하게 됨
         이 단계에서는 self를 통해 프로퍼티의 값을 수정할 수 있고, 인스턴스 메소드를 
         호출하는 등의 작업을 수행 가능
      2) 마지막으로 각각의 편의 이니셜라이저를 통해 self를 통한 사용자 정의 작업을 진핼할 수 있음
*/

class Person {
   var name: String
   var age: Int

   init(name: String, age: Int) {
      self.name = name
      self.age = age
   }
}

class Student: Person {
   var major: String

   init(name: String, age: Int, major: String) {
      // 자신의 프로퍼티 초기화
      self.major = "Swift"
      // 부모클래스 생성자 호출
      super.init(name: name, age: age)
   }

   convenience init(name: String) {
      // 편의 생성자는 기본적으로 자신의 지정 생성자를 호출해야함
      self.init(name: name, age: 7, major: "")
   }
}